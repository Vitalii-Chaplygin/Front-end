// Создайте функцию delay, которая принимает число (value) и возвращает промис.
// Промис должен разрешиться через 5 секунд и вернуть удвоенное значение аргумента value (в resolve).
// Если аргумент не является числом, промис должен быть отклонен с текстом ошибки "The argument is not a number" (в reject)

// const mypromois = new Promise((resolve,reject)=>{

//   // Выполнение асинхронных действий
//   // внутри этой функции нужно в резултате вызват одну из функций resolve или reject

//   при создании проомиса через ключивое слово new вызывается конструктор мы передем в качестве аргумента
//   callback функцию(у нее доолжн быть обязателно два параметра (resolve,reject)) и в теле фунции мы должны обязательно вызват
//   resolve или reject
//   resolve или reject - это тоже функции
//   когда вызывается  resolve- то мы должны передать какой то результат или данные.
//   если вызван  resolve - то промис считаетсся ВЫПОЛНЕННЫМ,
//   если где то возникла ошибка , то мы должны вызвать другую функцию reject и передать ей ту ошибку котоорая возникла
//   и промис будел считаться отклоненным
//   ==============================================================
// что бы плучит результат у него есть такие методы  then и catch

// mypromois.then(value =>{
//   действие в случае успешногоо выполнения проомиса
// value - это значение переданное в вызове функцию resolve внутри промиса
// })

// .catch(error =>{
//   действия в случае отклонения промиса значение
//   Error - это значение переданное в вызове функции реджект внутри промеса
// })

// })

// создаем свою функцию getData ,которая принимает один параметр (url) и взвращает Promise причем делает это неявно
// нету фигурных скобок в стрелочной функции
// в этоом Promise при создании экземпляра такого промисса мы передаем

// const getData = (url) =>
//   new Promise((resolve, reject) =>
//     fetch(url)
//       .then((response) => response.json())
//       .then((json) => resolve(json))
//       .catch((error) => reject(error))
//   );
//   getData(product)
//   .then(data=>console.log(data))
//   .catch(error=>console.log(error.message))

const delay = (value) => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (value !== "number") {
        reject("The argument is not a number");
      } else {
        resolve(value * 2);
      }
    }, 5000);
  });
};
delay(4 + "")
  .then((res) => {
    console.log(res);
  })
  .catch((error) => {
    console.log(error);
  });
